"""
Usage:
# Create train data:
python xml_to_csv.py -i ../../data/harman_360h/train -o ../workspace/training_demo/annotations/train_labels.csv

# Create test data:
python xml_to_csv.py -i ../../data/harman_360h/test -o ../workspace/training_demo/annotations/test_labels.csv
"""

import os
import glob
import pandas as pd
import argparse
from tqdm import tqdm
from src.data.annotation_parser import AnnotationsParser


def xml_to_csv(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines them in a single Pandas datagrame.

    Parameters:
    ----------
    path : {str}
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    img_format = "bmp"
    xml_list = []
    for xml_file in tqdm(glob.glob(path + '/*.xml')):
        tree = AnnotationsParser().read(xml_file)
        for obj in tree:
            filename = xml_file.split(r'/')[-1].split('\\')[-1][:-len(img_format)] + img_format
            width = obj['width']
            height = obj['height']
            classe = obj['name']
            xmin = obj['xmin']
            ymin = obj['ymin']
            xmax = obj['xmax']
            ymax = obj['ymax']
            value = (filename, int(width), int(height), classe, int(xmin), int(ymin), int(xmax), int(ymax))
            xml_list.append(value)
    column_name = ['filename', 'width', 'height', 'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    return xml_df


def main(input_dir=None, output_file=None):
    print(f'XML2CSV HAS STARTED. PROCESSING {input_dir}')
    if input_dir == None:
        # Initiate argument parser
        parser = argparse.ArgumentParser(
            description="Sample TensorFlow XML-to-CSV converter")
        parser.add_argument("-i",
                            "--inputDir",
                            help="Path to the folder where the input .xml files are stored",
                            type=str)
        parser.add_argument("-o",
                            "--outputFile",
                            help="Name of output .csv file (including path)", type=str)
        args = parser.parse_args()

        input_dir = args.inputDir
        output_file = args.outputFile

        if (input_dir is None):
            input_dir = os.getcwd()
        if (output_file is None):
            output_file = input_dir + "/labels.csv"

    assert (os.path.isdir(input_dir))

    xml_df = xml_to_csv(input_dir)
    xml_df.to_csv(output_file, index=None)
    print('Successfully converted xml to csv.')


if __name__ == '__main__':
    main()
