"""
Usage:
# Create train data:
python xml_to_csv.py -i /home/s/singla/Documents/TensorFlow/workspace/training_demo/images/train -o /home/s/singla/Documents/TensorFlow/workspace/training_demo/annotations/train_labels.csv

# Create test data:
python xml_to_csv.py -i /home/s/singla/Documents/TensorFlow/workspace/training_demo/images/test -o /home/s/singla/Documents/TensorFlow/workspace/training_demo/annotations/test_labels.csv
"""

import os
import glob
import pandas as pd
import argparse
from src.data.annotation_parser import AnnotationsParser


def xml_to_csv(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines them in a single Pandas datagrame.

    Parameters:
    ----------
    path : {str}
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    xml_list = []
    for xml_file in glob.glob(path + '/*.xml'):
        tree = AnnotationsParser().read(xml_file)
        for object in tree:
            filename = xml_file.split(r'/')[-1][:-3] + 'bmp'
            width = object['width']
            height = object['height']
            classe = object['name']
            xmin = object['xmin']
            ymin = object['ymin']
            xmax = object['xmax']
            ymax = object['ymax']
            value = (filename, int(width), int(height), classe, int(xmin), int(ymin), int(xmax), int(ymax))
            xml_list.append(value)
    column_name = ['filename', 'width', 'height', 'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    return xml_df


def main():
    # Initiate argument parser
    parser = argparse.ArgumentParser(
        description="Sample TensorFlow XML-to-CSV converter")
    parser.add_argument("-i",
                        "--inputDir",
                        help="Path to the folder where the input .xml files are stored",
                        type=str)
    parser.add_argument("-o",
                        "--outputFile",
                        help="Name of output .csv file (including path)", type=str)
    args = parser.parse_args()

    if (args.inputDir is None):
        args.inputDir = os.getcwd()
    if (args.outputFile is None):
        args.outputFile = args.inputDir + "/labels.csv"

    assert (os.path.isdir(args.inputDir))

    xml_df = xml_to_csv(args.inputDir)
    xml_df.to_csv(args.outputFile, index=None)
    print('Successfully converted xml to csv.')


if __name__ == '__main__':
    main()
